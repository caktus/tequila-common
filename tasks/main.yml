---
# This arranges for *FUTURE* connections to allow the project_user to access the
# socket connected to the forwarded ssh agent.  We'll also run the command
# directly from the next task, but this allows users to run other ansible plays
# without first running tequila-common, and still take advantage of agent
# forwarding.
#
# We are assuming all the projects use the same user.
#
# https://serverfault.com/questions/107187/ssh-agent-forwarding-and-sudo-to-another-user
- name: Set up /etc/ssh/sshrc to open up the ssh auth sock to {{ project_user }} iffi the agent was forwarded and the project user exists
  when: project_user is defined
  become: true
  lineinfile:
    path: /etc/ssh/sshrc
    backup: yes
    create: yes
    line: if [ -n "$SSH_AUTH_SOCK" ] ; then if grep --quiet {{ project_user }} /etc/passwd ; then setfacl -m u:{{ project_user }}:rx $(dirname "$SSH_AUTH_SOCK") -m u:{{ project_user }}:rwx "$SSH_AUTH_SOCK"; fi; fi

# This opens up the forwarded ssh agent socket for this connection
# so the project_user can use it.
#
# It's only really needed the first time tequila-common is run. After
# that, the /etc/ssh/sshrc script created above will do it on the
# establishment of every connection.
#
# This must not sudo before running, because we might not yet have fixed
# the sudo config to pass the SSH_AUTH_SOCK value through. It's okay not
# to sudo, because the connecting user must have access to the socket
# or they couldn't use it themselves, and so should be able to change
# its permissions.
#
# We just run the /etc/ssh/sshrc we just created, rather than put the
# ACL commands in two places (staying DRY).
- name: open up ssh agent forwarding socket
  become: false
  shell: . /etc/ssh/sshrc

# sudo needs to pass through the environment variable pointing at the
# forwarded ssh agent socket, so sudo commands know where it is.
- name: Configure sudo so ssh agent forwarding survives sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: SSH_AUTH_SOCK
    line: Defaults env_keep += "SSH_AUTH_SOCK"

- name: install 16.04-specific base packages
  apt: pkg={{ item }} state=present update-cache=yes cache_valid_time=3600
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'
  with_items:
    - python-software-properties

- name: install 18.04-specific base packages
  apt: pkg={{ item }} state=present update-cache=yes cache_valid_time=3600
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '18.04'
  with_items:
    - software-properties-common

- name: install base packages
  apt: pkg={{ item }} state=present update-cache=yes cache_valid_time=3600
  with_items:
    - dpkg-dev
    - wget
    - build-essential
    - vim
    - byobu
    - ntp
    - sudo
    - ufw
    - postfix
    - fail2ban
    - openssh-client
    - openssh-server
    - rsync
    - apt-transport-https
    - lsof

- include: newrelic.yml
  when: use_newrelic

- name: ensure that the admin and login groups are present
  group: name={{ item }} state=present system=yes
  with_items:
    - admin
    - login

- name: allow admin group users to sudo
  copy: src=admin dest=/etc/sudoers.d/admin owner=root mode=0440

- name: allow ssh through firewall
  ufw: rule=allow port=ssh

- name: ensure ufw is turned on
  ufw: state=enabled policy=deny

- name: ensure postfix is turned on
  service: name=postfix state=started

- name: ensure fail2ban is turned on
  service: name=fail2ban state=started

- name: configure fail2ban
  copy: src=jail.local dest=/etc/fail2ban/jail.local owner=root mode=0644
  notify:
    - restart fail2ban

- name: add github to the ssh known hosts
  known_hosts: path=/etc/ssh/ssh_known_hosts
               name='github.com'
               key="{{ lookup('file', 'github.pub') }}"

- name: set the locale to utf8
  lineinfile: line={{ item }} dest=/etc/default/locale state=present create=yes owner=root mode=0644
  with_items:
    - "LC_ALL=en_US.UTF-8"
    - "LANG=en_US.UTF-8"

- name: check that the project has some users configured
  fail: msg="Please define one or more developers in the `users` variable"
  when: not users

- name: ensure that dev users are present
  user: name={{ item.name }} shell=/bin/bash groups=admin,login append=yes
  with_items: "{{ users }}"

- include: vagrant.yml
  when: env_name == 'local'

# Note: this does a nested iteration, iterating over each user's defined keys.
- name: add ssh keys for dev users
  authorized_key: user={{ item.0.name }} key="{{ item.1 }}"
  with_subelements:
    - "{{ users }}"
    - public_keys

# Now that we've hopefully configured some non-root users to be able to ssh
# in, update the sshd config, which (among other things) will disable root
# logins.
- name: configure sshd
  copy: src=sshd_config dest=/etc/ssh/sshd_config owner=root mode=0644
  notify:
    - restart sshd

- name: check the active user accounts
  shell: "getent passwd $(basename -a /home/*) | cut -d: -f1"
  register: current_users_out

- name: disable user accounts that are not listed devs, unmanaged accounts, or project users
  user:
    name: "{{ item }}"
    state: absent
  with_items: "{{ current_users | difference(active_users) | difference(unmanaged_users) }}"
  vars:
    current_users: "{{ current_users_out.stdout_lines | difference([project_user]) }}"
    active_users: "{{ users | map(attribute='name') | list }}"

- name: create the project user {{ project_user }}
  user: name={{ project_user }}
        home=/home/{{ project_user }}
        shell=/bin/bash
        groups=www-data
        append=yes # appends the group(s) set above to the user's set of groups

- name: create the project root directory
  file: path={{ root_dir }}
        state=directory
        owner={{ project_user }}
        group={{ project_user }}
        mode=775

- name: create the log directory
  file: path={{ log_dir }}
        state=directory
        owner={{ project_user }}
        group=www-data
        mode=775

- name: create the public directory
  file: path={{ public_dir }}
        state=directory
        owner={{ project_user }}
        group=www-data
        mode=775

- name: static dir
  file: path={{ static_dir }}
        state=directory
        mode=0755
        group={{ project_user }}
        owner={{ project_user }}

- name: media dir
  file: path={{ media_dir }}
        state=directory
        mode=0755
        group={{ project_user }}
        owner={{ project_user }}

- name: create the user ssh directory
  file: path={{ ssh_dir }}
        state=directory
        owner={{ project_user }}
        group={{ project_user }}
        mode=700
